---
- name: Create ansible-playbook-access Namespace
  k8s:
    host: "https://api.{{ cluster_address }}:6443"
    validate_certs: no
    state: "{{ state }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ acm_service_account_namespace }}"

- name: Create ServiceAccount
  k8s:
    host: "https://api.{{ cluster_address }}:6443"
    validate_certs: no
    state: "{{ state }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: "{{ acm_service_account_name }}"
        namespace: "{{ acm_service_account_namespace }}"

- name: Create temporary directory for template files
  tempfile:
    state: directory
    suffix: tmp
  register: tmp_dir

- set_fact:
    working_dir: "{{ tmp_dir.path }}"

- name: Populate Templates
  template:
    src: "{{ item }}"
    dest: "{{ working_dir }}/{{ item | basename | regex_replace('\\.j2$', '') }}"
  with_fileglob:
    - ./templates/*.j2

- name: Apply Templates
  k8s:
    host: "https://api.{{ cluster_address }}:6443"
    validate_certs: no
    src: "{{ item }}"
    state: "{{ state }}"
    api_version: v1
  with_fileglob:
    - "{{ working_dir }}/*.yaml"

- name: Get ServiceAccount Secret
  k8s_info:
    host: "https://api.{{ cluster_address }}:6443"
    validate_certs: no
    kind: Secret
    namespace: "{{ acm_service_account_namespace }}"
  register: sa_secrets
  when: state == "present"

- name: Get Service Account token
  set_fact:
    sa_token: "{{ item.data.token | b64decode }}"
  with_items: "{{ sa_secrets.resources }}"
  when: (state == "present") and
        (item.metadata.name.startswith(acm_service_account_name + "-token-"))
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Encrypt token
  command: ansible-vault encrypt_string --vault-password-file ~/.passfile '{{ sa_token }}' --name '{{ acm_token_var }}'
  register: encrypted_var
  when: state == "present"

- name: Create encrypted token file
  copy:
    dest: "{{ acm_service_account_tokenfile }}"
    content: "{{ encrypted_var.stdout }}"
  when: state == "present"

- name: Remove token file
  file:
    path: "{{ acm_service_account_tokenfile }}"
    state: absent
  when: state == "absent"

# TODO Make this a non-destructive patch
- name: ACM subscription-admin ClusterRoleBinding
  k8s:
    host: "https://api.{{ cluster_address }}:6443"
    validate_certs: no
    state: patched
    definition:
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: 'open-cluster-management:subscription-admin'
      subjects:
        - kind: ServiceAccount
          apiVersion: v1
          name: "{{ acm_service_account_name }}"
          namespace: "{{ acm_service_account_namespace }}"

- name: System image-puller ClusterRoleBinding
  k8s:
    host: "https://api.{{ cluster_address }}:6443"
    validate_certs: no
    state: "{{ state }}"
    definition:
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: acm-image-pull-binding
      subjects:
        - kind: ServiceAccount
          apiVersion: v1
          name: "{{ acm_service_account_name }}"
          namespace: "{{ acm_service_account_namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: 'system:image-puller'
...